import datetime
import os
from typing import List, Dict, Optional
from bson import ObjectId  
from utils.mongodb_client import MongoDBClient
from dotenv import load_dotenv
load_dotenv()


class SessionService:
    """
    Service for session management, including retrieval, creation, updating, and deletion of sessions.
    Each session document contains:
      - _id: The unique session id (automatically generated by MongoDB)
      - user_id: The id of the user owning the session
      - title: A human-friendly title to be displayed in the UI
      - history: A list of JSON objects, where each object includes:
          * query: The user's query
          * response: The system's response
          * sources: A list of sources associated with the response
          * timestamp: The timestamp when this history entry was added
      - created_at: The timestamp of session creation
      - updated_at: The timestamp of the last update
    """

    COLLECTION_NAME = os.getenv("SESSIONS_COLLECTION_NAME")

    @classmethod
    async def get_collection(cls):
        """
        Returns the sessions collection from the database.
        """
        return await MongoDBClient.get_collection(cls.COLLECTION_NAME)

    @classmethod
    async def get_sessions_for_user(cls, user_id: str) -> List[Dict]:
        """
        Retrieves all sessions associated with a given user_id.
        """
        collection = await cls.get_collection()
        sessions = await collection.find({"user_id": user_id}).to_list(length=None)
        return sessions

    @classmethod
    async def get_session_by_id(cls, session_id: str) -> Optional[Dict]:
        """
        Retrieves a session by its unique session id.
        """
        collection = await cls.get_collection()
        session = await collection.find_one({"_id": ObjectId(session_id)})
        return session

    @classmethod
    async def create_session(cls, user_id: str, title: Optional[str]="New Chat") -> Dict:
        """
        Creates a new session document for a user.
        """
        collection = await cls.get_collection()
        session = {
            "user_id": user_id,
            "title": title,
            "history": [],
            "created_at": datetime.datetime.utcnow(),
            "updated_at": datetime.datetime.utcnow()
        }
        result = await collection.insert_one(session)
        session["_id"] = result.inserted_id
        return session

    @classmethod
    async def update_session_history(cls, session_id: str, history_entry: Dict) -> bool:
        """
        Appends a new entry to the session's history.
        The history_entry should include keys like 'query', 'response', 'sources', and 'timestamp'.
        Returns True if the update was successful.
        """
        collection = await cls.get_collection()
        result = await collection.update_one(
            {"_id": ObjectId(session_id)},
            {
                "$push": {"history": history_entry},
                "$set": {"updated_at": datetime.datetime.utcnow()}
            }
        )
        return result.modified_count > 0

    @classmethod
    async def delete_session(cls, session_id: str) -> bool:
        """
        Deletes a session from the database by its session id.
        Returns True if the deletion was successful.
        """
        collection = await cls.get_collection()
        result = await collection.delete_one({"_id": ObjectId(session_id)})
        return result.deleted_count > 0
